
import { useReducer, useState } from 'react';
import { toast } from 'react-toastify';

export default function AddProject() {
  const initialState = {
    name: '',
    description: '',
    deadline: '',    
    file_attatchments: '',
    
  };

  const reducer = (state, action) => {
    switch (action.type) {
      case 'TEXT_CHANGE':
        return { ...state, [action.field]: action.payload };
      case 'SIGNATURE_CHANGE':
        return { ...state, signature: action.payload };
      default:
        return state;
    }
  };

 
  const [formState, dispatch] = useReducer(reducer, initialState);

  async function handleSubmitForm(e) {
    e.preventDefault();
    const { name, description, deadline, file_attatchments} = formState;

    if (name && description && deadline && file_attatchments) {
      // Prepare the form data to be sent to the backend
      const formData = new FormData();
      formData.append('name', name);
      formData.append('description', description);
      formData.append('deadline', deadline);
      formData.append('file_attatchments', file_attatchments);
    
      try {
        const res = await fetch('http://127.0.0.1:5000/project', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${auth_token}`,            
          },
          body: formData,
        });

        if (!res.ok) {
          const errorData = await res.json();
          console.error('Error response:', errorData);
          throw new Error(`Failed to generate certificate: ${JSON.stringify(errorData)}`);
        }

        const data = await res.json();
        console.log('Form submitted', data);
        toast.success('Certificate generated successfully');
        setIsOpenModal(true);
      } catch (error) {
        console.error('Error generating certificate:', error);
        toast.error(`Failed to generate certificate: ${error.message}`);
      }
    } else {
      toast.error('Please fill all details');
    }
  }

  function handleTextChange(e) {
    dispatch({ type: 'TEXT_CHANGE', field: e.target.name, payload: e.target.value });
  }

  function handleSignatureChange(e) {
    const selected = e.target.files[0];
    dispatch({ type: 'SIGNATURE_CHANGE', payload: selected });
  }

  return (
    <>
      <div>
        <div >
          <form >
            <div>
              <label htmlFor='user-name'>Project Name:</label>
              <input
                type="text"
                name="name"
                value={formState.name}
                onChange={handleTextChange}
                id="name"
                required
              />
            </div>
            <div>
              <label htmlFor='description'>Description:</label>
              <input
                type="text"
                name="description"
                value={formState.description}
                onChange={handleTextChange}
                id="description"
                required
              />
            </div>
            <div>
              <label htmlFor='dateOfConductStart'>Deadline</label>
              <input
                type="date"
                name="deadline"
                value={formState.deadline}
                onChange={handleTextChange}
                id="deadline"
                required
              />
            </div>
            
            
            
            <button type="submit" >
              Create Project
            </button>
          </form>
        </div>
      </div>

      
    </>
  );
}